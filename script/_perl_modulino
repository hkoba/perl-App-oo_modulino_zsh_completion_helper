#compdef -P (*/)#*.pm

# print "YESS, modulino!!, yess"

(($+commands[oo_modulino_zsh_completion_helper.pl])) || {
  echo 1>&2 "Can't find oo_modulino_zsh_completion_helper.pl!"
  return 1
}

_perl_modulino_inspector=(
    oo_modulino_zsh_completion_helper.pl
    -0
    joined
)

function _perl_modulino_inspect {
    local method=$1 pmfile
    shift || return 1
    pmfile=$words[1]
    shift words || return 1
    # TODO: _call_program
    $_perl_modulino_inspector \
        $method \
        CURSOR $CURSOR \
        CURRENT $[CURRENT - 1] \
        NUMERIC "$NUMERIC" \
        pmfile $~pmfile \
        words \[${(j/,/)${(@qqq)words}}\] \
        BUFFER ${(q-)BUFFER} \
        "$@" || return $?
}

function _perl_modulino_is_completing_main_options {
    local argList
    argList=("$words[@]")
    shift argList
    local curPos=$[CURRENT-1]
    local methodPos=$argList[(ri)[a-z]*]
    if (($methodPos <= $#argList && $methodPos < $curPos)); then
        return 1
    fi
    [[ $argList[$curPos] = -* ]]
}

function _perl_modulino {
    integer ret=1
    # local curcontext=$curcontext state line
    # declare -A opt_args

    local debug=0
    if (($+DEBUG_ZSH_perl_modulino)) && ((DEBUG_ZSH_perl_modulino)); then
        debug=1
        if ((DEBUG_ZSH_perl_modulino >= 2)); then
            set -x
        fi
    fi

    if ! [[ -x $words[1] ]]; then
        # _message "No such module: $words[1]"
        print "No such module: $words[1]"
        return 0
    fi

    if _perl_modulino_is_completing_main_options; then
        local modulino_opts
        if ((debug)); then set -x; fi
        modulino_opts=(${(0)"$(_perl_modulino_inspect zsh_options)"})
        if ((debug)); then set +x; fi

        _arguments : $modulino_opts && ret=0

        # _describe -t main_options "Main Options" modulino_opts && ret=0
        
    else
        local modulino_methods
        if ((debug)); then set -x; fi
        modulino_methods=(${(0)"$(_perl_modulino_inspect zsh_methods)"})
        if ((debug)); then set +x; fi

        _describe -t method "Methods" modulino_methods && ret=0
    fi

    return ret
}

_perl_modulino
